// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/vega.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubmitTransactionRequest struct {
	Tx                   *SignedBundle `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubmitTransactionRequest) Reset()         { *m = SubmitTransactionRequest{} }
func (m *SubmitTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionRequest) ProtoMessage()    {}
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{0}
}

func (m *SubmitTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionRequest.Unmarshal(m, b)
}
func (m *SubmitTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionRequest.Merge(m, src)
}
func (m *SubmitTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionRequest.Size(m)
}
func (m *SubmitTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionRequest proto.InternalMessageInfo

func (m *SubmitTransactionRequest) GetTx() *SignedBundle {
	if m != nil {
		return m.Tx
	}
	return nil
}

type SubmitTransactionResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTransactionResponse) Reset()         { *m = SubmitTransactionResponse{} }
func (m *SubmitTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionResponse) ProtoMessage()    {}
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{1}
}

func (m *SubmitTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionResponse.Unmarshal(m, b)
}
func (m *SubmitTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionResponse.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionResponse.Merge(m, src)
}
func (m *SubmitTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionResponse.Size(m)
}
func (m *SubmitTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionResponse proto.InternalMessageInfo

func (m *SubmitTransactionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SignedBundle struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sig  []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	// Types that are valid to be assigned to Auth:
	//	*SignedBundle_Address
	//	*SignedBundle_PubKey
	Auth                 isSignedBundle_Auth `protobuf_oneof:"auth"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SignedBundle) Reset()         { *m = SignedBundle{} }
func (m *SignedBundle) String() string { return proto.CompactTextString(m) }
func (*SignedBundle) ProtoMessage()    {}
func (*SignedBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{2}
}

func (m *SignedBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedBundle.Unmarshal(m, b)
}
func (m *SignedBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedBundle.Marshal(b, m, deterministic)
}
func (m *SignedBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBundle.Merge(m, src)
}
func (m *SignedBundle) XXX_Size() int {
	return xxx_messageInfo_SignedBundle.Size(m)
}
func (m *SignedBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBundle.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBundle proto.InternalMessageInfo

func (m *SignedBundle) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignedBundle) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type isSignedBundle_Auth interface {
	isSignedBundle_Auth()
}

type SignedBundle_Address struct {
	Address []byte `protobuf:"bytes,101,opt,name=address,proto3,oneof"`
}

type SignedBundle_PubKey struct {
	PubKey []byte `protobuf:"bytes,102,opt,name=pubKey,proto3,oneof"`
}

func (*SignedBundle_Address) isSignedBundle_Auth() {}

func (*SignedBundle_PubKey) isSignedBundle_Auth() {}

func (m *SignedBundle) GetAuth() isSignedBundle_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *SignedBundle) GetAddress() []byte {
	if x, ok := m.GetAuth().(*SignedBundle_Address); ok {
		return x.Address
	}
	return nil
}

func (m *SignedBundle) GetPubKey() []byte {
	if x, ok := m.GetAuth().(*SignedBundle_PubKey); ok {
		return x.PubKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SignedBundle) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SignedBundle_Address)(nil),
		(*SignedBundle_PubKey)(nil),
	}
}

func init() {
	proto.RegisterType((*SubmitTransactionRequest)(nil), "vega.SubmitTransactionRequest")
	proto.RegisterType((*SubmitTransactionResponse)(nil), "vega.SubmitTransactionResponse")
	proto.RegisterType((*SignedBundle)(nil), "vega.SignedBundle")
}

func init() { proto.RegisterFile("proto/vega.proto", fileDescriptor_bb6b8173ee11af27) }

var fileDescriptor_bb6b8173ee11af27 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x69, 0x88, 0x12, 0x74, 0x74, 0x28, 0x37, 0x99, 0x0e, 0x80, 0x22, 0x84, 0x58, 0x48,
	0xa4, 0x22, 0x56, 0x86, 0x4c, 0x48, 0x6c, 0x69, 0x27, 0x16, 0xe4, 0xc4, 0x47, 0xb0, 0x14, 0xec,
	0x10, 0xdb, 0x50, 0xfe, 0x3d, 0xca, 0x91, 0x4a, 0x48, 0xd0, 0xc9, 0xef, 0xbe, 0xbb, 0x7b, 0xf2,
	0x3d, 0x58, 0xf4, 0x83, 0xf5, 0xb6, 0xf8, 0xa0, 0x56, 0xe6, 0x2c, 0x31, 0x1e, 0x75, 0x76, 0x0f,
	0x62, 0x1d, 0xea, 0x37, 0xed, 0x37, 0x83, 0x34, 0x4e, 0x36, 0x5e, 0x5b, 0x53, 0xd1, 0x7b, 0x20,
	0xe7, 0x31, 0x83, 0xc8, 0x6f, 0xc5, 0xec, 0x62, 0x76, 0x7d, 0xbc, 0xc2, 0x9c, 0x57, 0xd7, 0xba,
	0x35, 0xa4, 0xca, 0x60, 0x54, 0x47, 0x55, 0xe4, 0xb7, 0xd9, 0x1d, 0x9c, 0xfe, 0xb3, 0xef, 0x7a,
	0x6b, 0x1c, 0xa1, 0x80, 0xd4, 0x85, 0xa6, 0x21, 0xe7, 0xd8, 0xe5, 0xa8, 0xda, 0x95, 0xd9, 0x00,
	0xf3, 0xdf, 0x56, 0x88, 0x10, 0x2b, 0xe9, 0x25, 0x8f, 0xcd, 0x2b, 0xd6, 0xb8, 0x80, 0x43, 0xa7,
	0x5b, 0x11, 0x31, 0x1a, 0x25, 0x2e, 0x21, 0x95, 0x4a, 0x0d, 0xa3, 0x1f, 0x8d, 0xf4, 0xe1, 0xa0,
	0xda, 0x01, 0x14, 0x90, 0xf4, 0xa1, 0x7e, 0xa4, 0x2f, 0xf1, 0x32, 0xb5, 0xa6, 0xba, 0x4c, 0x20,
	0x96, 0xc1, 0xbf, 0xae, 0x9e, 0x21, 0xf5, 0x83, 0x54, 0xda, 0xb4, 0xb8, 0x81, 0x93, 0x3f, 0xbf,
	0xc6, 0xb3, 0xe9, 0xc4, 0x3d, 0x71, 0x2c, 0xcf, 0xf7, 0xf6, 0x7f, 0xce, 0x2d, 0xaf, 0x9e, 0x2e,
	0x1b, 0xab, 0x88, 0xc7, 0x38, 0xe3, 0xc6, 0x76, 0xb9, 0xb6, 0x45, 0x6b, 0x6f, 0x3e, 0x65, 0xd7,
	0x91, 0x2f, 0x98, 0xd6, 0x09, 0x3f, 0xb7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xbe, 0x90,
	0x62, 0x94, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TradingClient is the client API for Trading service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingClient interface {
	// Submit a signed transaction
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
}

type tradingClient struct {
	cc *grpc.ClientConn
}

func NewTradingClient(cc *grpc.ClientConn) TradingClient {
	return &tradingClient{cc}
}

func (c *tradingClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/vega.trading/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServer is the server API for Trading service.
type TradingServer interface {
	// Submit a signed transaction
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
}

func RegisterTradingServer(s *grpc.Server, srv TradingServer) {
	s.RegisterService(&_Trading_serviceDesc, srv)
}

func _Trading_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.trading/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trading_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vega.trading",
	HandlerType: (*TradingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _Trading_SubmitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vega.proto",
}
