syntax = "proto3";

package vega;
option go_package = "code.vegaprotocol.io/go-wallet/proto";


// Represents a transaction to be sent to Vega.
message Transaction {
  // One of the set of Vega commands (proto marshalled).
  bytes inputData = 1;
  // A random number used to provided uniqueness and prevents
  // against replay attack.
  uint64 nonce = 2;

  // The block height associated to the transaction.
  // This should always be current height of the node at the time of sending the Tx.
  // BlockHeight is used as a mechanism for replay protection.
  uint64 blockHeight = 3;
  // The sender of the transaction.
  // Any of the following would be valid:
  oneof from {
    // The address of the sender.
    bytes address = 1001;
    // The public key of the sender.
    bytes pubKey = 1002;
  }
}

// A signature to be authenticate a transaction
// and to be verified by the vega network
message Signature {
  // The bytes of the signature
  bytes sig = 1;
  // The algorithm used to create the signature
  string algo = 2;
  // The version of the signature used to create the signature
  uint64 version = 3;
}

// A bundle of a transaction and it's signature.
message SignedBundle {
  // Transaction payload (proto marshalled).
  bytes tx = 1;
  // The signature authenticating the transaction.
  Signature sig = 2;
}

// Represents Vega domain specific error information over gRPC/Protobuf.
message ErrorDetail {
  // A Vega API domain specific unique error code, useful for client side mappings. e.g. 10004
  int32 code = 1;
  // A message that describes the error in more detail, should describe the problem encountered.
  string message = 2;
  // Any inner error information that could add more context, or be helpful for error reporting.
  string inner = 3;
}
